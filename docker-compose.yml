# GraphRAG 知识库系统 - 基础服务 Docker Compose 配置
# 包含 PostgreSQL、Neo4j、Redis、MinIO、Weaviate、MinerU 等基础服务
# 作者: GraphRAG Team
# 创建时间: 2024

version: '3.8'

services:
  # PostgreSQL 数据库 - 用于存储文档元数据和文本块
  postgres:
    image: postgres:15-alpine
    container_name: graphrag_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-graphrag}
      POSTGRES_USER: ${POSTGRES_USER:-graphrag}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-graphrag123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts/postgres:/docker-entrypoint-initdb.d
    networks:
      - graphrag_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-graphrag} -d ${POSTGRES_DB:-graphrag}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Neo4j 图数据库 - 用于存储实体关系图
  neo4j:
    image: neo4j:5.15-community
    container_name: graphrag_neo4j
    restart: unless-stopped
    environment:
      NEO4J_AUTH: ${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD:-neo4j123}
      # 使用新的配置项名称
      NEO4J_initial_dbms_default__database: ${NEO4J_DATABASE:-graphrag}
      NEO4J_dbms_security_procedures_unrestricted: gds.*,apoc.*
      NEO4J_dbms_security_procedures_allowlist: gds.*,apoc.*
      # 使用新的内存配置项名称
      NEO4J_server_memory_heap_initial__size: 512m
      NEO4J_server_memory_heap_max__size: 2G
      NEO4J_server_memory_pagecache_size: 1G
      # 禁用严格配置验证以避免未知配置项错误
      NEO4J_server_config_strict__validation_enabled: "false"
      # Neo4j 5.x 认证配置 - 使用默认的 native 认证
      NEO4J_dbms_security_auth__enabled: "true"
    ports:
      - "7475:7474"  # HTTP (修改为 7475 避免冲突)
      - "7688:7687"  # Bolt (修改为 7688 避免冲突)
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - graphrag_network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "${NEO4J_USER:-neo4j}", "-p", "${NEO4J_PASSWORD:-neo4j123}", "RETURN 1"]
      interval: 10s
      timeout: 10s
      retries: 5

  # Redis 缓存 - 用于缓存和会话管理
  redis:
    image: redis:7-alpine
    container_name: graphrag_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123} --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - graphrag_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # MinIO 对象存储 - 用于存储原始文档和处理后的文件
  minio:
    image: minio/minio:latest
    container_name: graphrag_minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    volumes:
      - minio_data:/data
    networks:
      - graphrag_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Weaviate 向量数据库 - 用于语义搜索和向量存储
  weaviate:
    command:
    - --host
    - 0.0.0.0
    - --port
    - '8080'
    - --scheme
    - http
    image: cr.weaviate.io/semitechnologies/weaviate:1.33.0
    container_name: graphrag_weaviate
    restart: on-failure:0
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      # 优化模块配置，减少不必要的模块以避免多向量空间警告
      ENABLE_MODULES: 'text2vec-ollama,generative-ollama'
      CLUSTER_HOSTNAME: 'node1'
      # 添加性能优化配置
      LIMIT_RESOURCES: 'false'
      GOMAXPROCS: '4'
    ports:
      - "8080:8080"
      - "50051:50051"  # gRPC 端口
    volumes:
      - weaviate_data:/var/lib/weaviate
    networks:
      - graphrag_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # GraphRAG API 服务 - 主要的 FastAPI 应用
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: graphrag_api
    restart: unless-stopped
    environment:
      # 应用配置
      APP_NAME: "GraphRAG Knowledge Base API"
      APP_VERSION: "1.0.0"
      APP_DESCRIPTION: "GraphRAG 知识库系统 API 服务"
      DEBUG: ${DEBUG:-true}
      
      # 服务器配置
      HOST: "0.0.0.0"
      PORT: 8000
      WORKERS: ${API_WORKERS:-1}
      
      # 数据库连接配置
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-graphrag}
      POSTGRES_USER: ${POSTGRES_USER:-graphrag}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-graphrag123}
      
      # Neo4j 配置
      NEO4J_HOST: neo4j
      NEO4J_PORT: 7687
      NEO4J_USER: ${NEO4J_USER:-neo4j}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD:-neo4j123}
      NEO4J_DATABASE: ${NEO4J_DATABASE:-graphrag}
      
      # Redis 配置
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      REDIS_DB: 0
      
      # Weaviate 配置
      WEAVIATE_HOST: weaviate
      WEAVIATE_PORT: 8080
      WEAVIATE_SCHEME: http
      
      # MinIO 配置
      MINIO_HOST: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin123}
      MINIO_SECURE: "false"
      MINIO_BUCKET: ${MINIO_BUCKET:-graphrag}
      
      # 日志配置
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FORMAT: ${LOG_FORMAT:-structured}
      LOG_FILE_ENABLED: "true"
      LOG_FILE_PATH: "/app/logs/app.log"
      
      # 安全配置
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      
    ports:
      - "8000:8000"  # API 服务端口
    volumes:
      - api_logs:/app/logs
      - api_data:/app/data
      - api_uploads:/app/uploads
      - ./app:/app/app:ro  # 开发时代码热重载（生产环境可移除）
    networks:
      - graphrag_network
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
      weaviate:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MinerU 文档解析服务 - 用于 PDF 和文档处理
  # mineru:
  #   image: opendatalab/mineru:latest
  #   container_name: graphrag_mineru
  #   restart: unless-stopped
  #   environment:
  #     - PYTHONPATH=/app
  #   ports:
  #     - "8501:8501"  # Streamlit 界面
  #   volumes:
  #     - mineru_data:/app/data
  #     - mineru_output:/app/output
  #     - ./configs/mineru:/app/configs
  #   networks:
  #     - graphrag_network
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   depends_on:
  #     - minio

# 数据卷定义
volumes:
  postgres_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  weaviate_data:
    driver: local
  api_logs:
    driver: local
  api_data:
    driver: local
  api_uploads:
    driver: local
  # mineru_data:
  #   driver: local
  # mineru_output:
  #   driver: local

# 网络定义
networks:
  graphrag_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16